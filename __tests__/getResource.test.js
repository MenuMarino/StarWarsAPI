'use strict';

// tests for getResource
// Generated by serverless-jest-plugin

const mod = require('./../handlers/getResource');
const { getResource, getAllResources } = require('../libs/dynamodb');
const jestPlugin = require('serverless-jest-plugin');

jest.mock('../libs/dynamodb');

const lambdaWrapper = jestPlugin.lambdaWrapper;
const wrapped = lambdaWrapper.wrap(mod, { handler: 'handler' });

describe('getResource', () => {
  beforeAll((done) => {
    done();
  });

  it('should return 400 if resource is missing', async () => {
    const event = {
      queryStringParameters: {},
    };

    const response = await wrapped.run(event);

    expect(response.statusCode).toBe(400);
    expect(JSON.parse(response.body).message).toBe(
      'Missing resource in query parameters'
    );
  });

  it('should return 200 and fetch a specific resource if id is provided', async () => {
    // Mocking successful API call and fetch of an specific resource ID
    getResource.mockResolvedValue({
      id: 1,
      name: 'Luke Skywalker',
    });

    const event = {
      queryStringParameters: {
        resource: 'people',
        id: '1',
      },
    };

    const response = await wrapped.run(event);

    expect(response.statusCode).toBe(200);
    const body = JSON.parse(response.body);
    expect(body.message).toBe('Resources fetched successfully');
    expect(body.data).toEqual({ id: 1, name: 'Luke Skywalker' });
    expect(getResource).toHaveBeenCalledWith(
      process.env.SW_DYNAMODB_TABLE,
      'people',
      1
    );
  });

  it('should return 200 and fetch all resources if no id is provided', async () => {
    // Mocking successful API call and fetch of all resources
    getAllResources.mockResolvedValue([
      { id: 1, name: 'Luke Skywalker' },
      { id: 2, name: 'Darth Vader' },
    ]);

    const event = {
      queryStringParameters: {
        resource: 'people',
      },
    };

    const response = await wrapped.run(event);

    expect(response.statusCode).toBe(200);
    const body = JSON.parse(response.body);
    expect(body.message).toBe('Resources fetched successfully');
    expect(body.data).toEqual([
      { id: 1, name: 'Luke Skywalker' },
      { id: 2, name: 'Darth Vader' },
    ]);
    expect(getAllResources).toHaveBeenCalledWith(
      process.env.SW_DYNAMODB_TABLE,
      'people'
    );
  });

  it('should return 500 if there is an error fetching resources', async () => {
    // Mocking failed API call
    getAllResources.mockRejectedValue(new Error('DynamoDB error'));

    const event = {
      queryStringParameters: {
        resource: 'people',
      },
    };

    const response = await wrapped.run(event);

    expect(response.statusCode).toBe(500);
    const body = JSON.parse(response.body);
    expect(body.message).toBe('Error fetching resources');
    expect(body.error).toBe('DynamoDB error');
  });
});
