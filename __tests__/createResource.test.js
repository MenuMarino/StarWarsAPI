'use strict';

// tests for createResource
// Generated by serverless-jest-plugin

const mod = require('./../handlers/createResource');
const { get } = require('../libs/requests');
const { saveResource } = require('../libs/dynamodb');
const { translateFields } = require('../libs/translate');
const jestPlugin = require('serverless-jest-plugin');

jest.mock('../libs/requests');
jest.mock('../libs/dynamodb');
jest.mock('../libs/translate');

const lambdaWrapper = jestPlugin.lambdaWrapper;
const wrapped = lambdaWrapper.wrap(mod, { handler: 'handler' });

describe('createResource', () => {
  beforeAll((done) => {
    done();
  });

  it('should return 201 when resource is saved successfully', async () => {
    // Mocking successful API call and save
    get.mockResolvedValue({ name: 'Luke Skywalker', height: '172' });
    translateFields.mockReturnValue({
      nombre: 'Luke Skywalker',
      altura: '172',
    });
    saveResource.mockResolvedValue(true);

    const event = {
      body: JSON.stringify({
        resource: 'people',
        id: 1,
      }),
    };

    const response = await wrapped.run(event);

    expect(response.statusCode).toBe(201);
    expect(JSON.parse(response.body).message).toBe(
      'Resource saved successfully'
    );
    expect(get).toHaveBeenCalledWith(`${process.env.SW_API}/people/1/`);
    expect(saveResource).toHaveBeenCalledWith(
      process.env.SW_DYNAMODB_TABLE,
      'people',
      1,
      { nombre: 'Luke Skywalker', altura: '172' }
    );
  });

  it('should return 500 if missing resource or id', async () => {
    const event = {
      body: JSON.stringify({
        resource: 'people',
      }),
    };

    const response = await wrapped.run(event);

    expect(response.statusCode).toBe(500);
    expect(JSON.parse(response.body).message).toBe('Error saving resource');
  });

  it('should return 500 if Star Wars API call fails', async () => {
    // Mocking failed API call
    get.mockResolvedValue(null);

    const event = {
      body: JSON.stringify({
        resource: 'people',
        id: 1,
      }),
    };

    const response = await wrapped.run(event);

    expect(response.statusCode).toBe(500);
    expect(JSON.parse(response.body).message).toBe('Error saving resource');
  });

  it('should return 500 if DynamoDB save fails', async () => {
    // Mocking successful API call but failed DynamoDB save
    get.mockResolvedValue({ name: 'Luke Skywalker', height: '172' });
    translateFields.mockReturnValue({
      nombre: 'Luke Skywalker',
      altura: '172',
    });
    saveResource.mockRejectedValue(new Error('DynamoDB Error'));

    const event = {
      body: JSON.stringify({
        resource: 'people',
        id: 1,
      }),
    };

    const response = await wrapped.run(event);

    expect(response.statusCode).toBe(500);
    expect(JSON.parse(response.body).message).toBe('Error saving resource');
  });
});
